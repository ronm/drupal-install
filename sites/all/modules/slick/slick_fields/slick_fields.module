<?php

/**
 * @file
 * Adds fields integration with Slick carousel.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * Adds the slick format option within the manage display form of the following
 * supported fields: Image, Field collection and Media.
 */
function slick_fields_field_formatter_info() {
  $formatters['slick'] = array(
    'label' => t('Slick carousel'),
    'field types' => array('image'),
    'settings' => array(
      'optionset' => 'default',
      'optionset_label' => 'Default',
      'skin' => '',
      'slide_layout' => '',
      'image_style' => '',
      'thumbnail_style' => '',
      'thumbnail_hover' => '',
      'slide_image' => '',
      'slide_caption' => array(),
    ),
  );

  if (module_exists('file_entity') || module_exists('field_collection')) {
    if (module_exists('file_entity')) {
      $formatters['slick']['field types'][] = 'file';
      // $formatters['slick']['file types'][] = array('image', 'audio', 'video');
    }
    if (module_exists('field_collection')) {
      $formatters['slick']['field types'][] = 'field_collection';
    }

    $formatters['slick']['settings'] += array(
      'slide_overlay' => array(),
      'slide_link' => '',
      'slide_title' => '',
      'view_mode' => '',
      'media_switch' => '',
      'aspect_ratio' => '',
      'aspect_ratio_overlay' => 0,
    );
  }

  if (module_exists('picture')) {
    $formatters['slick']['settings'] += array(
      'picture' => 0,
      'picture_style' => '',
      'picture_fallback' => '',
    );
  }

  if (module_exists('colorbox')) {
    $formatters['slick']['settings'] += array(
      'colorbox_style' => '',
    );
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Provides display settings on the manage display page of the following
 * supported fields: Image, Field collection and Media with formatter slick.
 */
function slick_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $path = drupal_get_path('module', 'slick_fields');
  $slick_module_path = drupal_get_path('module', 'slick');
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element  = array();

  $field_type = $field['type'];
  $field_name = $field['field_name'];
  // $field empty at admin/structure/file-types/manage/image/file-display,
  // and this form is loaded there via file_entity_file_formatter_info().
  if (empty($field)) {
    $field_type = $instance['entity_type'];
  }

  module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.admin');

  $is_picture  = function_exists('picture_get_mapping_options');
  $is_colorbox = function_exists('_colorbox_doheader');

  $layout_options  = array();
  $caption_options = array();
  $title_options   = array();
  $link_options    = array();
  $optionsets = slick_optionset_options();

  $is_views_ui = '';
  if ($instance['entity_type'] == 'ctools') {
    $is_views_ui = '<h3 class="form--slick__title">' . t('Make sure to check "Use field template" under "Style settings" below, if using multiple-value field for the slides. Views preview works with jQuery >= 1.7.') . '</h3>';
  }

  $element['opening'] = array(
    '#markup' => '<div class="form--slick form--compact form--field has-tooltip">' . $is_views_ui,
  );

  $element['optionset'] = array(
    '#title' => t('Option set'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset'],
    '#description' => t('Manage optionsets at <a href="@link">Slick carousel admin page</a>.', array('@link' => url('admin/config/media/slick'))),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  $element['optionset_label'] = array(
    '#type' => 'hidden',
    '#default_value' => $optionsets[$settings['optionset']],
  );

  $skins = slick_skins(TRUE);
  $element['skin'] = array(
    '#type' => 'select',
    '#title' => t('Skin'),
    '#options' => $skins,
    '#default_value' => $settings['skin'],
    '#description' => t('Skins allow swappable layouts like next/prev links, split image and caption, etc. However a combination of skins and options may lead to unpredictable layouts, get dirty yourself.'),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('This is to override, or fallback as needed.'),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  $element['thumbnail_style'] = array(
    '#title' => t('Thumbnail style'),
    '#type' => 'select',
    '#default_value' => $settings['thumbnail_style'],
    '#empty_option' => t('- None -'),
    '#options' => $image_styles,
    '#description' => t('Depends on dots option enabled. If provided, dots pager will be replaced with thumbnails. Leave empty to use dots (if enabled) instead.'),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  $element['thumbnail_hover'] = array(
    '#title' => t('Thumbnail visible on hover'),
    '#type' => 'checkbox',
    '#default_value' => $settings['thumbnail_hover'],
    '#field_suffix' => '',
    '#title_display' => 'before',
    '#states' => array(
      'invisible' => array(
        'select[name*="[thumbnail_style]"]' => array('value' => ''),
      ),
    ),
    '#description' => t('If checked, dots pager are kept, and thumbnail will be hidden and only visible on mouseover, default to min-width 120px. Otherwise dots are replaced by thumbnails.'),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  $field_entity_type = $field_type;
  switch ($field_type) {
    // Core image field.
    case 'image':
      $layout_options = slick_layouts();
      break;

    // Media via file field.
    case 'file':
      $caption_options = _slick_fields_get_media_fields($instance);
      $layout_options  = _slick_fields_get_media_fields($instance, array('options_select'));
      $title_options   = _slick_fields_get_media_fields($instance, array('text_textfield', 'text_textarea'));
      $link_options    = _slick_fields_get_media_fields($instance, array(
        'text_textfield',
        'link_field',
        'url_external',
      ));
      break;

    // This should go as a separate module, but alas.
    case 'field_collection':
      $field_entity_type = 'field_collection_item';
      $instance_bundle = $field['field_name'];
      $bundle = 'field_collection_item';
      $caption_options = _slick_fields_get_fc_fields($instance, array(
        'file',
        'image',
        'link_field',
        'list_text',
        'text_long',
        'text_with_summary',
        'taxonomy_term_reference',
        'text',
      ));

      $layout_options = _slick_fields_get_fc_fields($instance, array('list_text'));
      $image_options  = _slick_fields_get_fc_fields($instance, array('image', 'file'));
      $title_options  = _slick_fields_get_fc_fields($instance, array('text', 'text_long'));
      $link_options   = _slick_fields_get_fc_fields($instance, array(
        'text',
        'link_field',
        'url',
      ));
      break;

    // @todo entityreference field, damn too much, make it a separate module.
    // case 'entityreference':
    // $field_type = $field['settings']['target_type'];
    // break;

    default:
      break;
  }

  // Layout to all supported fields.
  $element['slide_layout'] = array(
    '#title' => t('Slide layout'),
    '#type' => 'select',
    '#default_value' => $settings['slide_layout'],
    '#options' => $layout_options,
    '#empty_option' => t('- None -'),
    '#description' => t('This affects the entire slides. Split half requires any skin Split. Leave empty to DIY.'),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  if (in_array($field_entity_type, array('field_collection_item', 'file'))) {
    $element['slide_layout']['#prefix'] = '<h3 class="form--slick__title">' . t('Fields') . '</h3>';
    // Complex slide layout is provided by FC alone.
    // Skip media file field as it is the main/ background media already.
    if (in_array($field_entity_type, array('field_collection_item'))) {
      $element['slide_image'] = array(
        '#title' => t('Main image field'),
        '#type' => 'select',
        '#empty_option' => t('None'),
        '#options' => $image_options,
        '#default_value' => $settings['slide_image'],
        '#description' => t('Main background image field'),
        '#attributes' => array('class' => array('is-tooltip')),
      );

      // Field collection overlay.
      $element['slide_overlay'] = array(
        '#title' => t('Overlay image/video field'),
        '#type' => 'select',
        '#empty_option' => t('None'),
        '#options' => $image_options,
        '#default_value' => $settings['slide_overlay'],
        '#description' => t('If audio/video, make sure the display is not image display.'),
        '#attributes' => array('class' => array('is-tooltip')),
      );
    }

    // Title field.
    $element['slide_title'] = array(
      '#title' => t('Slide title field'),
      '#type' => 'select',
      '#empty_option' => t('None'),
      '#options' => $title_options,
      '#default_value' => $settings['slide_title'],
      '#description' => t('If provided, it will bre wrapped with H2 and class .slide__title.'),
      '#attributes' => array('class' => array('is-tooltip')),
    );

    // Caption fields for FC and Media.
    $element['slide_caption'] = array(
      '#title' => t('Caption fields'),
      '#type' => 'checkboxes',
      '#default_value' => $settings['slide_caption'],
      '#options' => $caption_options,
      '#description' => t('Enable any of the following fields as slide caption. These fields are treated and wrapped as captions. Make sure to make them visible at their relevant Manage display. '),
      '#attributes' => array('class' => array('is-tooltip')),
    );

    // Add empty suffix to style checkboxes like iOS.
    foreach ($element['slide_caption']['#options'] as $key => $value) {
      $element['slide_caption'][$key]['#field_suffix'] = '';
      $element['slide_caption'][$key]['#title_display'] = 'before';
    }

    if ($field_entity_type == 'field_collection_item') {
      $element['slide_caption']['#description'] .= t('And not choose the same field as main/ background image.');
    }

    if (empty($caption_options)) {
      $element['slide_caption']['#description'] = t('No fields found for the captions. You need to add relevant fields for the captions.');
    }

    // Link field.
    $element['slide_link'] = array(
      '#title' => t('Link field'),
      '#type' => 'select',
      '#empty_option' => t('None'),
      '#options' => $link_options,
      '#default_value' => $settings['slide_link'],
      '#description' => t('Link to content: Read more, View Case Study, etc, wrapped with class .slide__link.'),
      '#attributes' => array('class' => array('is-tooltip')),
    );

    // Layout fields to make individual slide more variant.
    $element['slide_layout']['#title'] = t('Slide layout field');
    $element['slide_layout']['#description'] = t('Create a dedicated List (text - max number 1) field related to the caption placement with the following supported keys: top, right, bottom, left, center, center-top, etc. See <a href="@readme" target="_blank">README</a> under "Slide layout" for more info. Split half requires any skin Split. Leave empty to DIY.', array('@readme' => url($path . '/README.txt')));

    $view_mode_options = _slick_fields_view_modes($field_entity_type, TRUE);
    $element['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $view_mode_options,
      '#default_value' => $settings['view_mode'],
      '#description' => t('The view mode is a specific display to contain the fieldable slides. Create more view modes using hook_entity_info_alter, or <a href="@entity_view_mode">entity_view_mode</a>. ', array('@entity_view_mode' => 'http://drupal.org/project/entity_view_mode')),
      '#access' => count($view_mode_options) > 1,
      '#attributes' => array('class' => array('is-tooltip')),
    );

    if ($field_entity_type == 'file') {
      $element['view_mode']['#description'] .= t('For video, make sure to choose relevant video display, not as image.');
    }
  }

  $element['media_switch'] = array(
    '#title' => t('Media switcher'),
    '#type' => 'select',
    '#default_value' => $settings['media_switch'],
    '#options' => array(
      'iframe-switch' => t('Image to iframe switcher'),
      // 'colorbox-switch' => t('Image to colorbox switcher'),
      // @todo image to colorbox node, any taker, no?
    ),
    '#empty_option' => t('- None -'),
    '#description' => t('Supports Colorbox and Media iframe switcher.'),
    '#attributes' => array('class' => array('is-tooltip')),
  );

  if (in_array($field_entity_type, array('field_collection_item', 'file'))) {
    $element['media_switch']['#description'] .= t('<br />Iframe switcher: audio/video iframe is hidden below image overlay until toggled, otherwise iframe is always displayed, and draggable fails. Aspect ratio applies.');

    $element['aspect_ratio'] = array(
      '#type' => 'select',
      '#title' => t('Aspect ratio'),
      // http://en.wikipedia.org/wiki/List_of_common_resolutions
      '#description' => t('Aspect ratio to get consistently responsive images and iframes within responsive layout, required if using media file to switch between iframe and overlay image, otherwise you have to do it properly. <a href="@dimensions">Image styles and video dimensions</a> must <a href="@follow">follow the ratio</a>, otherwise your images will be unexpedtedly resized. <a href="@link">Learn more</a>, or leave empty if you care not for aspect ratio, or prefer to DIY, etc. Check "Aspect ratio overlay only" below to apply to Media or FC overlay field only.', array('@dimensions' => '//size43.com/jqueryVideoTool.html', '@follow' => '//en.wikipedia.org/wiki/Aspect_ratio_%28image%29', '@link' => '//www.smashingmagazine.com/2014/02/27/making-embedded-content-work-in-responsive-design/')),
      '#options' => drupal_map_assoc(array('4:3', '16:9')),
      '#empty_option' => t('- None -'),
      '#default_value' => $settings['aspect_ratio'],
      '#attributes' => array('class' => array('is-tooltip')),
      '#states' => array(
        'visible' => array(
          'select[name*="[media_switch]"]' => array('value' => 'iframe-switch'),
        ),
      ),
    );

    if ($field_entity_type == 'field_collection_item') {
      $element['media_switch']['#title'] = t('Media overlay switcher');
      $element['media_switch']['#description'] .= t('<br />Both applied to overlay only.');
      $element['aspect_ratio_overlay'] = array(
        '#title' => t('Aspect ratio overlay only'),
        '#type' => 'checkbox',
        '#default_value' => $settings['aspect_ratio_overlay'],
        '#field_suffix' => '',
        '#title_display' => 'before',
        '#states' => array(
          'invisible' => array(
            'select[name*="[aspect_ratio]"]' => array('value' => ''),
          ),
          'visible' => array(
            'select[name*="[media_switch]"]' => array('value' => 'iframe-switch'),
          ),
        ),
        '#description' => t('Apply aspect ratio to overlay media only, excluding main/background image.'),
        '#attributes' => array('class' => array('is-tooltip')),
      );
    }
  }

  // Optional colorbox integration.
  if ($is_colorbox) {
    $element['media_switch']['#options']['colorbox-switch'] = t('Image to colorbox switcher');
    $element['media_switch']['#description'] .= t('<br />Colorbox switcher: image to colorbox switch.');

    $element['colorbox_style'] = array(
      '#title' => t('Colorbox image style'),
      '#type' => 'select',
      '#default_value' => $settings['colorbox_style'],
      '#empty_option' => t('None (original)'),
      '#options' => $image_styles,
      '#states' => array(
        'visible' => array(
          'select[name*="[media_switch]"]' => array('value' => 'colorbox-switch'),
        ),
      ),
    );
  }

  // Good old core image field.
  if ($field_entity_type == 'image') {
    unset($element['media_switch']['#options']['iframe-switch']);
    if (!$is_colorbox) {
      unset($element['media_switch']);
    }

    $element['slide_caption'] = array(
      '#title' => t('Caption fields'),
      '#type' => 'checkboxes',
      '#default_value' => $settings['slide_caption'],
      '#options' => array(
        'title_field' => t('Title'),
        'alt_field' => t('Alt'),
      ),
      '#attributes' => array('class' => array('is-tooltip')),
    );

    // Add empty suffix to style checkboxes like iOS.
    foreach ($element['slide_caption']['#options'] as $key => $value) {
      $element['slide_caption'][$key]['#field_suffix'] = '';
      $element['slide_caption'][$key]['#title_display'] = 'before';
    }

    // If the image field doesn't have the Title field enabled, tell the user.
    if (isset($instance['settings']['title_field'])
      && $instance['settings']['title_field'] == FALSE
      || isset($instance['settings']['alt_field'])
      && $instance['settings']['alt_field'] == FALSE) {

      // Loosen up for Views UI.
      if ($instance['entity_type'] != 'ctools') {
        $element['slide_caption']['#disabled'] = TRUE;
      }
      $element['slide_caption']['#description'] = t('You need to <a href="@url">enable the title/ alt field</a> to use it as a caption.', array(
        '@url' => url('admin/structure/types/manage/' . $instance['bundle'] . '/fields/' . $instance['field_name'],
            array(
              'fragment' => 'edit-instance-settings-title-field',
              'query' => array(
                'destination' => 'admin/structure/types/manage/' . $instance['bundle'] . '/display',
              ),
            )
          ),
      ));
    }
  }

  // Picture module integration.
  // The Slick image_style with the picture mapping config.
  if ($is_picture) {
    $element['picture'] = array(
      '#type' => 'checkbox',
      '#title' => t('Picture mapping'),
      '#description' => t('Picture mapping is only reasonable for large images.'),
      '#default_value' => $settings['picture'],
      '#field_suffix' => '',
      '#title_display' => 'before',
      '#attributes' => array('class' => array('is-tooltip')),
    );

    $options = picture_get_mapping_options();
    $element['picture_style'] = array(
      '#title' => t('Picture group'),
      '#states' => array(
        'visible' => array(
          ':input[name*="[picture]"]' => array('checked' => TRUE),
        ),
      ),
    );

    if (!empty($options)) {
      $element['picture_style'] += array(
        '#type' => 'select',
        '#description' => t('Picture mapping for the main stage image.'),
        '#options' => $options,
        '#default_value' => $settings['picture_style'],
        '#attributes' => array('class' => array('is-tooltip')),
      );
    }
    else {
      $element['picture_style'] += array(
        '#type' => 'item',
        '#markup' => t("There're no picture mappings defined, you'll have to @create them first.", array('@create' => l(t('create'), 'admin/config/media/picture'))),
      );
    }

    $element['picture_fallback'] = array(
      '#title' => t('Fallback image style'),
      '#type' => 'select',
      '#default_value' => $settings['picture_fallback'],
      '#empty_option' => t('Automatic'),
      '#options' => $image_styles,
      '#states' => array(
        'visible' => array(
          ':input[name*="[picture]"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  $element['closing'] = array(
    '#markup' => '</div>',
  );

  if ($display['type'] == 'slick') {
    $element['#attached']['css'][] = $slick_module_path . '/css/admin/slick.admin--ui.css';
    $element['#attached']['css'][] = $slick_module_path . '/css/admin/slick.admin--ui--field.css';
    $element['#attached']['js'][] = $slick_module_path . '/js/slick.admin.ui.js';
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Displays the summary of the set options of the Slick formatted fields.
 */
function slick_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'slick') {
    $skins = slick_skins(TRUE);

    if (isset($settings['skin'])) {
      $skin = $settings['skin'] ? $skins[$settings['skin']] : t('None');
      $summary[] = t('Skin: @skin', array('@skin' => $skin));
    }

    if (isset($settings['optionset_label'])) {
      $optionset_label = $settings['optionset_label'] ?: t('Default settings');
      $summary[] = t('Option set: @optionset_label', array('@optionset_label' => $optionset_label));
    }

    if (isset($settings['image_style'])) {
      $image_style = $settings['image_style'] ?: t('None (original image)');
      $summary[] = t('Image style: @image_style', array('@image_style' => $image_style));
    }

    if (!empty($settings['view_mode'])) {
      $summary[] = t('File view mode: @view_mode', array('@view_mode' => $settings['view_mode']));
    }

    if (isset($settings['slide_image'])) {
      $slide_image = $settings['slide_image'] ?: t('None');
      $summary[] = t('Image: @slide_image', array('@slide_image' => $slide_image));
    }

    if (isset($settings['thumbnail_style'])) {
      $thumbnail_style = $settings['thumbnail_style'] ?: t('None');
      $summary[] = t('Thumbnail: @thumbnail_style', array('@thumbnail_style' => $thumbnail_style));
      if (isset($settings['thumbnail_hover'])) {
        $thumbnail_hover = $settings['thumbnail_hover'] ? t('Yes') : t('None');
        $summary[] = t('Thumbnail hover: @thumbnail_hover', array('@thumbnail_hover' => $thumbnail_hover));
      }
    }

    if (isset($settings['slide_overlay'])) {
      $slide_overlay = $settings['slide_overlay'] ?: t('None');
      $summary[] = t('Overlay image/video: @slide_overlay', array('@slide_overlay' => $slide_overlay));
    }

    if (isset($settings['slide_layout'])) {
      $slide_layout = $settings['slide_layout'] ?: t('None');
      $summary[] = t('Layout: @slide_layout', array('@slide_layout' => $slide_layout));
    }

    if (isset($settings['media_switch'])) {
      $media_switch = $settings['media_switch'] ?: t('None');
      $summary[] = t('Media switch: @media_switch', array('@media_switch' => $media_switch));
    }

    if (isset($settings['slide_title'])) {
      $slide_title = $settings['slide_title'] ?: t('None');
      $summary[] = t('Title: @slide_title', array('@slide_title' => $slide_title));
    }

    if (isset($settings['slide_link'])) {
      $slide_link = $settings['slide_link'] ?: t('None');
      $summary[] = t('Link: @slide_link', array('@slide_link' => $slide_link));
    }

    if (!empty($settings['slide_caption'])) {
      $captions = $settings['slide_caption'];
      if (is_array($settings['slide_caption'])) {
        $captions = array_filter(array_values($settings['slide_caption']));
        $captions = implode(", ", $captions);
      }
      $summary[] = t('Caption: @captions', array('@captions' => $captions));
    }
    else {
      $summary[] = t('Caption: None');
    }

    // Picture supports.
    if (isset($settings['picture'])) {
      $picture_style = $settings['picture_style'] ?: t('None (original image)');
      $summary[] = t('Picture style: @picture_style', array('@picture_style' => $picture_style));

      if (!empty($settings['picture_fallback'])) {
        $summary[] = t('Picture fallback: %picture_fallback', array('%picture_fallback' => $settings['picture_fallback']));
      }
    }
  }

  // Build settings summary.
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Displays the supported Image, Field collection and Media fields.
 */
function slick_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  $build = array();

  if (count($items) > 0) {
    $settings = array(
      'count' => count($items),
      'has_overlay' => FALSE,
      'has_media' => FALSE,
      'colorbox_ready' => FALSE,
      'picture_ready' => FALSE,
      'field_type' => $field['type'],
      'field_name' => $field['field_name'],
      'slide_caption' => FALSE,
      'attach_colorbox' => FALSE,
      'thumbnail_hover' => FALSE,
      'media_switch' => FALSE,
      'picture' => FALSE,
    );

    $settings = array_merge($settings, $display['settings']);
    $settings['slide_caption'] = is_array($settings['slide_caption']) ? array_filter($settings['slide_caption']) : $settings['slide_caption'];
    $settings['attach_colorbox'] = $settings['media_switch'] == 'colorbox-switch';
    $field_name = $settings['field_name'];
    $view_mode = !empty($settings['view_mode']) ? $settings['view_mode'] : 'full';

    $attach                    = array();
    $attach['attach_media']    = FALSE;
    $attach['attach_skin']     = $settings['skin'];
    $attach['attach_colorbox'] = $settings['attach_colorbox'];

    list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
    $slick_id = &drupal_static('slick_id', 0);
    $item_id = drupal_clean_css_identifier("slick-{$entity_type}-{$bundle}-{$field_name}-" . ++$slick_id);
    $settings['attributes']['id'] = $item_id;

    module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.global');
    switch ($field['type']) {
      case 'image':
        $attach['attach_media']     = FALSE;
        $settings['colorbox_ready'] = TRUE;
        $settings['picture_ready']  = TRUE;
        module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.image');
        $build = _slick_fields_format_image($settings, $items, $field, $view_mode, $langcode);
        break;

      case 'file':
        $attach['attach_media']     = TRUE;
        $settings['has_media']      = TRUE;
        $settings['colorbox_ready'] = TRUE;
        $settings['picture_ready']  = TRUE;
        module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.media');
        $build = _slick_fields_format_media($settings, $items, $field, $view_mode, $langcode);
        break;

      case 'field_collection':
        $attach['attach_media'] = TRUE;
        module_load_include('inc', 'slick_fields', 'includes/slick_fields.formatters.field_collection');
        $build = _slick_fields_format_field_collection($settings, $items, $field, $view_mode, $langcode);
        break;
    }

    $element = array(
      '#theme' => 'slick',
      '#items' => $build,
      '#settings' => $settings,
      '#options' => array(),
      '#attached' => slick_attach($attach),
    );
  }

  return $element;
}
